// This was a generated file, created from ATS.bnf.
// But since we don't currently want to use the PSI
// parser generator, we leave it alone for now.

package com.atslangplugin

//import com.atslangplugin.psi.impl.ATSKeyImpl;
//import com.atslangplugin.psi.impl.ATSPropertyImpl;
import com.atslangplugin.psi.ATSTokenType
import com.intellij.psi.tree.IElementType

class ATSTokenTypes {
    companion object {
        val ABSTYPE: IElementType = ATSTokenType("ABSTYPE")
        val ADDRAT: IElementType = ATSTokenType("ADDRAT")
        val AND: IElementType = ATSTokenType("AND")
        val AS: IElementType = ATSTokenType("AS")
        val ASSUME: IElementType = ATSTokenType("ASSUME")
        val AT: IElementType = ATSTokenType("AT")
        val ATLBRACE: IElementType = ATSTokenType("ATLBRACE")
        val ATLBRACKET: IElementType = ATSTokenType("ATLBRACKET")
        val ATLPAREN: IElementType = ATSTokenType("ATLPAREN")
        val BACKSLASH: IElementType = ATSTokenType("BACKSLASH")
        val BAD_CHARACTER: IElementType = ATSTokenType("BAD_CHARACTER")
        val BANG: IElementType = ATSTokenType("BANG")
        val BAR: IElementType = ATSTokenType("BAR")
        val BEGIN: IElementType = ATSTokenType("BEGIN")
        val BQUOTE: IElementType = ATSTokenType("BQUOTE")
        val BQUOTELPAREN: IElementType = ATSTokenType("BQUOTELPAREN")
        val CASE: IElementType = ATSTokenType("CASE")
        val CDATA: IElementType = ATSTokenType("CDATA")
        val CHAR: IElementType = ATSTokenType("CHAR")
        val CLASSDEC: IElementType = ATSTokenType("CLASSDEC")
        val COLON: IElementType = ATSTokenType("COLON")
        val COLONLT: IElementType = ATSTokenType("COLONLT")
        val COMMA: IElementType = ATSTokenType("COMMA")
        val COMMALPAREN: IElementType = ATSTokenType("COMMALPAREN")
        val COMMENT: IElementType = ATSTokenType("COMMENT")
        val COMMENT_BLOCK: IElementType = ATSTokenType("COMMENT_BLOCK")
        val COMMENT_LINE: IElementType = ATSTokenType("COMMENT_LINE")
        val COMMENT_REST: IElementType = ATSTokenType("COMMENT_REST")
        val CRLF: IElementType = ATSTokenType("CRLF")
        val DATASORT: IElementType = ATSTokenType("DATASORT")
        val DATATYPE: IElementType = ATSTokenType("DATATYPE")
        val DLRARRPSZ: IElementType = ATSTokenType("DLRARRPSZ")
        val DLRBREAK: IElementType = ATSTokenType("DLRBREAK")
        val DLRCONTINUE: IElementType = ATSTokenType("DLRCONTINUE")
        val DLRDELAY: IElementType = ATSTokenType("DLRDELAY")
        val DLREFFMASK: IElementType = ATSTokenType("DLREFFMASK")
        val DLREFFMASK_ARG: IElementType = ATSTokenType("DLREFFMASK_ARG")
        val DLREXTERN: IElementType = ATSTokenType("DLREXTERN")
        val DLREXTFCALL: IElementType = ATSTokenType("DLREXTFCALL")
        val DLREXTKIND: IElementType = ATSTokenType("DLREXTKIND")
        val DLREXTMCALL: IElementType = ATSTokenType("DLREXTMCALL")
        val DLREXTVAL: IElementType = ATSTokenType("DLREXTVAL")
        val DLREXTYPE: IElementType = ATSTokenType("DLREXTYPE")
        val DLREXTYPE_STRUCT: IElementType = ATSTokenType("DLREXTYPE_STRUCT")
        val DLRLST: IElementType = ATSTokenType("DLRLST")
        val DLRMYFILENAME: IElementType = ATSTokenType("DLRMYFILENAME")
        val DLRMYFUNCTION: IElementType = ATSTokenType("DLRMYFUNCTION")
        val DLRMYLOCATION: IElementType = ATSTokenType("DLRMYLOCATION")
        val DLRRAISE: IElementType = ATSTokenType("DLRRAISE")
        val DLRREC: IElementType = ATSTokenType("DLRREC")
        val DLRSHOWTYPE: IElementType = ATSTokenType("DLRSHOWTYPE")
        val DLRTUP: IElementType = ATSTokenType("DLRTUP")
        val DLRTEMPENVER: IElementType = ATSTokenType("DLRTEMPENVER")
        val DLRVCOPYENV: IElementType = ATSTokenType("DLRVCOPYENV")
        val DO: IElementType = ATSTokenType("DO")
        val DOLLAR: IElementType = ATSTokenType("DOLLAR")
        val DOT: IElementType = ATSTokenType("DOT")
        val DOTDOT: IElementType = ATSTokenType("DOTDOT")
        val DOTDOTDOT: IElementType = ATSTokenType("DOTDOTDOT")
        val DOTINT: IElementType = ATSTokenType("DOTINT")
        val DOTLT: IElementType = ATSTokenType("DOTLT")
        val DOTLTGTDOT: IElementType = ATSTokenType("DOTLTGTDOT")
        val DYNLOAD: IElementType = ATSTokenType("DYNLOAD")
        val ELSE: IElementType = ATSTokenType("ELSE")
        val END: IElementType = ATSTokenType("END")
        val EOF: IElementType = ATSTokenType("EOF")
        val EQ: IElementType = ATSTokenType("EQ")
        val EQGT: IElementType = ATSTokenType("EQGT")
        val EQGTGT: IElementType = ATSTokenType("EQGTGT")
        val EQLT: IElementType = ATSTokenType("EQLT")
        val EQLTGT: IElementType = ATSTokenType("EQLTGT")
        val EQSLASHEQGT: IElementType = ATSTokenType("EQSLASHEQGT")
        val EQSLASHEQGTGT: IElementType = ATSTokenType("EQSLASHEQGTGT")
        val EXCEPTION: IElementType = ATSTokenType("EXCEPTION")
        val EXTCODE: IElementType = ATSTokenType("EXTCODE")
        val EXTERN: IElementType = ATSTokenType("EXTERN")
        val EXTVAR: IElementType = ATSTokenType("EXTVAR")
        val EXTYPE: IElementType = ATSTokenType("EXTYPE")
        val FIX: IElementType = ATSTokenType("FIX")
        val FIXITY: IElementType = ATSTokenType("FIXITY")
        val FLOAT: IElementType = ATSTokenType("FLOAT")
        val FOLDAT: IElementType = ATSTokenType("FOLDAT")
        val FORSTAR: IElementType = ATSTokenType("FORSTAR")
        val FREEAT: IElementType = ATSTokenType("FREEAT")
        val FUN: IElementType = ATSTokenType("FUN")
        val GT: IElementType = ATSTokenType("GT")
        val GTDOT: IElementType = ATSTokenType("GTDOT")
        val GTLT: IElementType = ATSTokenType("GTLT")
        val HASH: IElementType = ATSTokenType("HASH")
        val HASHLBRACKETOLON: IElementType = ATSTokenType("HASHLBRACKETOLON")
        val IDENTIFIER: IElementType = ATSTokenType("IDENTIFIER") // Not exactly in ATS (CHECK_ME)
        val IF: IElementType = ATSTokenType("IF")
        val IMPLEMENT: IElementType = ATSTokenType("IMPLEMENT")
        val IMPORT: IElementType = ATSTokenType("IMPORT")
        val IN: IElementType = ATSTokenType("IN")
        val INT: IElementType = ATSTokenType("INT")
        val LAM: IElementType = ATSTokenType("LAM")
        val LBRACE: IElementType = ATSTokenType("LBRACE")
        val LBRACKET: IElementType = ATSTokenType("LBRACKET")
        val LET: IElementType = ATSTokenType("LET")
        val LOCAL: IElementType = ATSTokenType("LOCAL")
        val LPAREN: IElementType = ATSTokenType("LPAREN")
        val LT: IElementType = ATSTokenType("LT")
        val MACDEF: IElementType = ATSTokenType("MACDEF")
        val MINUSGT: IElementType = ATSTokenType("MINUSGT")
        val MINUSLT: IElementType = ATSTokenType("MINUSLT")
        val MINUSLTGT: IElementType = ATSTokenType("MINUSLTGT")
        //IElementType NONE = new ATSTokenType("NONE"); // unused
        val NONFIX: IElementType = ATSTokenType("NONFIX")
        val OF: IElementType = ATSTokenType("OF")
        val OP: IElementType = ATSTokenType("OP")
        val OVERLOAD: IElementType = ATSTokenType("OVERLOAD")
        val PERCENT: IElementType = ATSTokenType("PERCENT")
        val PERCENTLPAREN: IElementType = ATSTokenType("PERCENTLPAREN")
        val QMARK: IElementType = ATSTokenType("QMARK")
        val QUOTELBRACE: IElementType = ATSTokenType("QUOTELBRACE")
        val QUOTELBRACKET: IElementType = ATSTokenType("QUOTELBRACKET")
        val QUOTELPAREN: IElementType = ATSTokenType("QUOTELPAREN")
        val RBRACE: IElementType = ATSTokenType("RBRACE")
        val RBRACKET: IElementType = ATSTokenType("RBRACKET")
        val REC: IElementType = ATSTokenType("REC")
        val REFAT: IElementType = ATSTokenType("REFAT")
        val REF_IDENTIFIER: IElementType = ATSTokenType("REF_IDENTIFIER") // (CHECK_ME)
        val REQUIRE: IElementType = ATSTokenType("REQUIRE")
        val RPAREN: IElementType = ATSTokenType("RPAREN")
        val SCASE: IElementType = ATSTokenType("SCASE")
        val SEMICOLON: IElementType = ATSTokenType("SEMICOLON")
        val SIF: IElementType = ATSTokenType("SIF")
        val SORTDEF: IElementType = ATSTokenType("SORTDEF")
        val SRPASSERT: IElementType = ATSTokenType("SRPASSERT")
        val SRPDEFINE: IElementType = ATSTokenType("SRPDEFINE")
        val SRPELIF: IElementType = ATSTokenType("SRPELIF")
        val SRPELIFDEF: IElementType = ATSTokenType("SRPELIFDEF")
        val SRPELIFNDEF: IElementType = ATSTokenType("SRPELIFNDEF")
        val SRPELSE: IElementType = ATSTokenType("SRPELSE")
        val SRPENDIF: IElementType = ATSTokenType("SRPENDIF")
        val SRPERROR: IElementType = ATSTokenType("SRPERROR")
        val SRPIF: IElementType = ATSTokenType("SRPIF")
        val SRPIFDEF: IElementType = ATSTokenType("SRPIFDEF")
        val SRPIFNDEF: IElementType = ATSTokenType("SRPIFNDEF")
        val SRPINCLUDE: IElementType = ATSTokenType("SRPINCLUDE")
        val SRPPRINT: IElementType = ATSTokenType("SRPPRINT")
        val SRPTHEN: IElementType = ATSTokenType("SRPTHEN")
        val SRPUNDEF: IElementType = ATSTokenType("SRPUNDEF")
        val STACST: IElementType = ATSTokenType("STACST")
        val STADEF: IElementType = ATSTokenType("STADEF")
        val STALOAD: IElementType = ATSTokenType("STALOAD")
        val STATIC: IElementType = ATSTokenType("STATIC")
        val STRING: IElementType = ATSTokenType("STRING")
        val SYMELIM: IElementType = ATSTokenType("SYMELIM")
        val SYMINTR: IElementType = ATSTokenType("SYMINTR")
        val THEN: IElementType = ATSTokenType("THEN")
        val TILDE: IElementType = ATSTokenType("TILDE")
        val TKINDEF: IElementType = ATSTokenType("TKINDEF")
        val TRY: IElementType = ATSTokenType("TRY")
        val TYPE: IElementType = ATSTokenType("TYPE")
        val TYPEDEF: IElementType = ATSTokenType("TYPEDEF")
        val VAL: IElementType = ATSTokenType("VAL")
        val VAL_IDENTIFIER: IElementType = ATSTokenType("VAL_IDENTIFIER") // (CHECK_ME)
        val VAR: IElementType = ATSTokenType("VAR")
        val VIEWAT: IElementType = ATSTokenType("VIEWAT")
        val WHEN: IElementType = ATSTokenType("WHEN")
        val WHERE: IElementType = ATSTokenType("WHERE")
        val WHILE: IElementType = ATSTokenType("WHILE")
        val WHITE_SPACE: IElementType = ATSTokenType("WHITE_SPACE") // Not exactly in ATS (CHECK_ME)
        val WHILESTAR: IElementType = ATSTokenType("WHILESTAR")
        val WITH: IElementType = ATSTokenType("WITH")
        val WITHTYPE: IElementType = ATSTokenType("WITHTYPE")
    }

    /*
  class Factory {
    public static PsiElement createElement(ASTNode node) {
      IElementType type = node.getElementType();
       if (type == KEY) {
        return new ATSKeyImpl(node);
      }
      else if (type == PROPERTY) {
        return new ATSPropertyImpl(node);
      }
      throw new AssertionError("Unknown element type: " + type);
    }
  }
  */
}
